#!/usr/bin/env ruby
require 'pg'
require 'b50d-config.rb'
require 'gengo'
DB = PG::Connection.new(dbname: 'd50b', user: 'd50b')

# GET RAW INPUT FILE
raise 'USAGE: translate {filename}' unless ARGV[0] && File.exist?(ARGV[0])
raw_filename = ARGV[0].strip
raw = File.read(raw_filename).strip

# CHANGE FILENAME?
print "Unless you want the filename to be #{raw_filename}, type new one now: "
new_filename = STDIN.gets.strip
filename = (new_filename.size > 0) ? new_filename : raw_filename
puts "OK. Filename is «#{filename}»"

# INSERT INTO DATABASE:
res = DB.exec_params("INSERT INTO core.translation_files(filename, raw) VALUES ($1, $2) RETURNING id", [filename, raw])
raise 'error' unless /\A[0-9]+\Z/ === res[0]['id']
id = Integer(res[0]['id'])
puts "ID is #{id}"

# parse into sentences
res = DB.exec_params("SELECT * FROM core.parse_translation_file($1)", [id])
puts "TEMPLATE:"
puts res[0]

# get text to send to Gengo
res = DB.exec_params("SELECT text FROM core.text_for_translator($1)", [id])
text = res[0]['text']
puts "TEXT:"
puts text

# TODO: review before sending. showing 30 lines at a time, getting OK.
# http://developers.gengo.com/v2/api_methods/jobs/
# http://developers.gengo.com/v2/api_methods/payloads/index.html
job = {
	type: 'text',
	lc_src: 'en',
	lc_tgt: 'es-la',  # TODO: multiple! + es = es-la & pt = pt-br
	slug: filename,
	custom_data: filename,
	body_src: text,
	tier: 'standard',
	auto_approve: 1,
	force: 1,
	pupose: 'Online content',
	tone: 'Informal',
	comment: ('Keep strange format of one sentence per line. Should be %d lines. Thank you!' % text.lines.size)
}

gengo = Gengo::API.new(public_key: GENGO_PUBLIC, private_key: GENGO_PRIVATE, sandbox: false)
puts gengo.postTranslationJobs(jobs: {filename: job})

#!/usr/bin/env ruby
require 'pg'
require 'b50d-config.rb'
require 'gengo'
DB = PG::Connection.new(dbname: 'd50b', user: 'd50b')

# ask language
print "What language code? "
lang = STDIN.gets.strip

# show recent file IDs:
res = DB.exec("SELECT id, filename FROM core.translation_files ORDER BY id DESC LIMIT 10")
res.each do |r|
	puts "%d\t%s" % [r['id'], r['filename']]
end

# ask file ID
print "What filename ID # in the database? "
file_id = STDIN.gets.strip

# get sentences
res = DB.exec_params("SELECT code, sortid, en FROM core.translations WHERE file_id = $1 ORDER BY sortid", [file_id])
howmany = res.to_a.size

# http://developers.gengo.com/v2/api_methods/jobs/
# http://developers.gengo.com/v2/api_methods/payloads/index.html
jobs = {}
res.each do |r|
	jobs[r['code']] = {
		body_src: r['en'],
		lc_src: 'en',
		lc_tgt: lang,
		tier: 'standard',
		type: 'text',
		slug: 'sivers.org/ml sentence %d' % r['sortid'],
		as_group: 1,
		position: r['sortid'],
		force: 1,
		pupose: 'Online content',
		tone: 'Informal',
		auto_approve: 0,
		custom_data: r['code'],
		comment: 'http://sivers.org/ml for context. This is sentence #%d of %d.' % [r['sortid'], howmany]
	}
end

gengo = Gengo::API.new(public_key: GENGO_PUBLIC, private_key: GENGO_PRIVATE, sandbox: false)
File.open('gengo.log', 'w') {|f| f.puts gengo.postTranslationJobs(jobs: jobs) }
puts "see gengo.log"
